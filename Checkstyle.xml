<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <!-- File filter BeforeExecutionExclusionFileFilter decides which files should be excluded from being processed by the utility -->
    <module name="BeforeExecutionExclusionFileFilter">
        <!-- Exclude all Test folder files  -->
        <property name="fileNamePattern"
                  value=".*[\\/]src[\\/]test[\\/].*$"/>
    </module>
    <module name="TreeWalker">
        <!-- Checks that any combination of String literals is on the left side of an equals() comparison. Also checks for String literals assigned to some field (such as someString.equals(anotherString = "text")) -->
        <module name="EqualsAvoidNull"/>
        <!-- Checks that the parts of a class, record, or interface declaration appear in the order suggested by the Code Conventions for the Java Programming Language -->
        <module name="DeclarationOrder"/>
        <!-- Checks that package names conform to a specified pattern -->
        <module name="PackageName"/>
        <!-- Checks that type names conform to a specified pattern -->
        <module name="TypeName"/>
        <!-- Checks that method names conform to a specified pattern -->
        <module name="MethodName"/>
        <!-- Checks that interfaces should not contain only constants -->
        <module name="InterfaceIsType"/>
        <!-- Controls the indentation between comments and surrounding code. Comments are indented at the same level as the surrounding code -->
        <module name="CommentsIndentation"/>
        <!-- Detects double brace initialization -->
        <module name="AvoidDoubleBraceInitialization"/>
        <!-- Checks that for loop control variables are not modified inside the for block -->
        <module name="ModifiedControlVariable"/>
        <!-- Checks if unnecessary parentheses are used in a statement or expression -->
        <module name="UnnecessaryParentheses"/>
        <!-- Checks if unnecessary semicolon is used after type member declaration -->
        <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>
        <!-- Checks if unnecessary semicolon is used after type declaration -->
        <module name="UnnecessarySemicolonAfterOuterTypeDeclaration"/>
        <!-- Checks if unnecessary semicolon is used in last resource declaration -->
        <module name="UnnecessarySemicolonInTryWithResources"/>
        <!-- Checks if unnecessary semicolon is in enum definitions -->
        <module name="UnnecessarySemicolonInEnumeration"/>
        <!-- Checks for empty catch blocks. By default, check allows empty catch block with any comment inside or when exception variable name is called "ignored" -->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="ignored"/>
            <message key="catch.block.empty"
                     value="Empty catch block. To suppress that check, name exception variable &quot;ignored&quot;."/>
        </module>
        <!-- Detects empty statements (standalone ";" semicolon) -->
        <module name="EmptyStatement"/>
        <!-- Checks the policy on the padding of parentheses for typecasts. That is, whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden -->
        <module name="TypecastParenPad"/>
        <!-- Checks that a token is surrounded by whitespace. Allows empty bodies of catches and constructors -->
        <module name="WhitespaceAround">
            <property name="allowEmptyCatches" value="true"/>
            <property name="allowEmptyConstructors" value="true"/>
        </module>
        <!-- Checks that string literals are not used with == or != -->
        <module name="StringLiteralEquality"/>
        <!-- Checks for over-complicated boolean return statements -->
        <module name="SimplifyBooleanReturn"/>
        <!-- Checks for over-complicated boolean expressions -->
        <module name="SimplifyBooleanExpression"/>
        <!-- Checks that a local variable is declared and/or assigned, but not used -->
        <module name="UnusedLocalVariable"/>
        <!-- Checks for unused import statements -->
        <module name="UnusedImports"/>
        <!-- Checks that the block tag is followed by description -->
        <module name="NonEmptyAtclauseDescription"/>
        <!-- Checks for the placement of left curly braces ('{') for code blocks -->
        <module name="LeftCurly"/>
        <!-- Checks the placement of right curly braces ('}') for code blocks. This check supports if-else, try-catch-finally blocks, switch statements, while-loops, for-loops, method definitions, class definitions, constructor definitions, instance, static initialization blocks, annotation definitions and enum definitions -->
        <module name="RightCurly"/>
        <!-- Checks for braces around code blocks -->
        <module name="NeedBraces"/>
        <!-- Checks that array initialization do not contain a trailing comma -->
        <module name="NoArrayTrailingComma"/>
        <!-- Checks that enum definition does not contain a trailing comma -->
        <module name="NoEnumTrailingComma"/>
        <!-- Checks the policy on the padding of parentheses; that is whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden -->
        <module name="ParenPad"/>
        <!-- Checks that method parameter names conform to a specified pattern. By using accessModifiers property it is possible to specify different formats for methods at different visibility levels -->
        <module name="ParameterName"/>
        <!-- Disallows assignment of parameters -->
        <module name="ParameterAssignment"/>
        <!-- Checks that overloaded methods are grouped together -->
        <module name="OverloadMethodsDeclarationOrder"/>
        <!-- Check that the default is after all the cases in a switch statement -->
        <module name="DefaultComesLast">
            <property name="severity" value="warning"/>
        </module>
        <!-- Checks that switch statement has a default clause -->
        <module name="MissingSwitchDefault"/>
        <!-- Checks for empty line separators before package, all import declarations, fields, constructors, methods, nested classes, static initializers and instance initializers.Checks for empty line separators before not only statements but implementation and documentation comments and blocks as well -->
        <module name="EmptyLineSeparator">
            <property name="tokens" value="VARIABLE_DEF, METHOD_DEF"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="severity" value="error"/>
        </module>
        <!-- Checks that non-whitespace characters are separated by no more than one whitespace. Separating characters by tabs or multiple spaces will be reported -->
        <module name="SingleSpaceSeparator"/>
        <!-- Checks that a token is followed by whitespace, with the exception that it does not check for whitespace after the semicolon of an empty for iterator -->
        <module name="WhitespaceAfter"/>
        <!-- Checks that there is no whitespace before the colon in a switch block -->
        <module name="NoWhitespaceBeforeCaseDefaultColon">
            <property name="severity" value="error"/>
        </module>
        <!-- Checks that static, non-final variable names conform to a specified pattern -->
        <module name="StaticVariableName"/>
        <!-- Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list. That is, if the identifier and left parenthesis are on the same line, checks whether a space is required immediately after the identifier or such a space is forbidden. If they are not on the same line, reports a violation, unless configured to allow line breaks -->
        <module name="MethodParamPad"/>
        <!-- Checks that there is no whitespace before a token. More specifically, it checks that it is not preceded with whitespace, or (if linebreaks are allowed) all characters on the line before are whitespace -->
        <module name="NoWhitespaceBefore">
            <property name="severity" value="error"/>
        </module>
        <!-- Checks that there is no whitespace after a token. More specifically, it checks that it is not followed by whitespace, or (if linebreaks are allowed) all characters on the line after are whitespace. -->
        <module name="NoWhitespaceAfter">
            <property name="allowLineBreaks" value="false"/>
            <property name="severity" value="error"/>
        </module>
        <!-- Checks that specified types are not declared to be thrown. Declaring that a method throws (Error, RuntimeException, Throwable, java.lang.Error, java.lang.RuntimeException, java.lang.Throwable) -->
        <module name="IllegalThrows"/>
        <!-- Checks that certain exception types do not appear in a catch statement (Error, Exception, RuntimeException, Throwable, java.lang.Error, java.lang.Exception, java.lang.RuntimeException, java.lang.Throwable) -->
        <module name="IllegalCatch"/>
        <!-- Checks that catch parameter names conform to a specified pattern -->
        <module name="CatchParameterName">
            <property name="severity" value="warning"/>
        </module>
        <!-- Checks that constant names conform to a specified pattern. A constant is a static and final field or an interface/annotation field, except serialVersionUID and serialPersistentFields. -->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
            <message key="name.invalidPattern"
                     value="Constants (static and final fields or an interface/annotation fields) should be named in &quot;Upper Snake Case&quot;(all uppercase with underscores separating words.)"/>
            <property name="severity" value="error"/>
        </module>
        <!-- Checks that long constants are defined with an upper ell. That is 'L' and not 'l'. -->
        <module name="UpperEll">
            <property name="severity" value="warning"/>
            <message key="upperEll"
                     value="'long' literal ends with lowercase &quot;l&quot;. Use uppercase &quot;L&quot;."/>
        </module>
        <!-- Regex to match System.out.print, System.out.println, and System.out.printf calls. Logger should be used instead -->
        <module name="Regexp">
            <property name="format" value="System\.out\.(println|print|printf)\("/>
            <property name="illegalPattern" value="true"/>
            <property name="message"
                      value="Replace this use of System.out by a logger."/>
            <property name="severity" value="error"/>
        </module>
        <!-- Match TO-DO comments in single-line comments -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="(?i)^.*//.*\bTODO\b"/>
            <property name="message"
                      value="Single-line TODO found - remember to address this"/><!-- TODO: change message -->
            <property name="severity" value="warning"/>
        </module>
        <!-- Match FIX-ME comments in single-line comments -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="(?i)^.*//.*\bFIXME\b"/>
            <property name="message"
                      value="Single-line FIXME found - requires immediate attention"/><!-- TODO: change message -->
            <property name="severity" value="warning"/>
        </module>
        <!-- Checks for multiple occurrences of the same string literal within a single file. Default value of max occurrences set to 1 -->
        <module name="MultipleStringLiterals">
            <property name="severity" value="warning"/>
        </module>
        <!-- Checks that Javadocs are located at the correct position. As specified at Documentation Comment Specification for the Standard Doclet, Javadocs are recognized only when placed immediately before module, package, class, interface, constructor, method, or field declarations. Any other position, like in the body of a method, will be ignored by the javadoc tool and is considered invalid by this check. -->
        <module name="InvalidJavadocPosition"/>
        <!-- Checks that the Javadoc content begins from the same position (second line by default) for all Javadoc comments in the project. -->
        <module name="JavadocContentLocation"/>
        <!-- Checks for missing package definition Javadoc comments in package-info.java files --><!-- TODO: not needed in santa -->
        <module name="MissingJavadocPackage">
            <property name="severity" value="warning"/>
        </module>
        <!-- Checks the Javadoc of a method or constructor -->
        <module name="JavadocMethod"/>
        <!-- Enforces Javadoc comments on classes of any visibility level -->
        <module name="JavadocType">
            <!-- No scope property means it applies to all access levels -->
            <property name="tokens" value="CLASS_DEF"/>
            <property name="allowMissingParamTags" value="false"/>
            <property name="allowUnknownTags" value="false"/>
            <property name="severity" value="error"/>
        </module>
        <!-- Checks for missing Javadoc comments for class, enum, interface, and annotation interface definitions -->
        <module name="MissingJavadocType"/>
        <!-- Validates Javadoc comments to help ensure they are well-formed -->
        <module name="JavadocStyle">
            <property name="checkEmptyJavadoc" value="true"/>
        </module>
        <module name="org.oneapp.annotation.WithTimeoutTrailingCommentCheck">
            <property name="severity" value="error"/>
        </module>
        <module name="org.oneapp.emptyLine.NoBlankLineBeforeClassEndCheck">
            <property name="severity" value="error"/>
        </module>
    </module>
    <!-- Checks that each Java package has a Javadoc file used for commenting -->
    <module name="JavadocPackage"/>
    <!-- Detects duplicated keys in properties files --><!-- TODO: file is out of scope. Lead this check to location of properties file/s -->
    <module name="UniqueProperties">
        <message key="properties.duplicate.property"
                 value="Property duplicated."/>
    </module>
    <!-- Checks for long lines (more than 120 characters) in java files. -->
    <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="120"/>
        <message key="maxLineLen"
                 value="Number of characters in line overlaps 120 characters. Please shorten or divide it."/>
    </module>
    <!-- Match TO-DO comments in block comments -->
    <module name="RegexpMultiline">
        <property name="format" value="(?i)/\*\s*TODO\b[\s\S]*?\*/"/>
        <property name="message"
                  value="Multi-line TODO found - remember to address this"/><!-- TODO: change message -->
        <property name="severity" value="warning"/>
    </module>
    <!-- Match FIX-ME comments in block comments -->
    <module name="RegexpMultiline">
        <property name="format" value="(?i)/\*\s*FIXME\b[\s\S]*?\*/"/>
        <property name="message"
                  value="Multi-line FIXME found - requires immediate attention"/><!-- TODO: change message -->
        <property name="severity" value="warning"/>
    </module>
</module>
